import airflow
from datetime import timedelta, datetime

# Custom Operators deployed as Airflow plugins
from airflow.providers.amazon.aws.operators.glue import AwsGlueJobOperator
from airflow.sensors.external_task_sensor import ExternalTaskSensor

from common.notification import handle_notification

def on_failure(context):
    handle_notification(context, {
        "airflow_base_url": "{{ AIRFLOW_BASE_URL }}",
        "notifaction_sender_email_address": "{{ NOTIFICATION_SENDER_EMAIL_ADDRESS }}",
        "data_steward_email_address": "{{ product.owner }}",
        "product_id": "{{ product.id }}",
        "product_version": "{{ product.version }}"
    })

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': airflow.utils.dates.days_ago(1),
    'retries': 0,
    'retry_delay': timedelta(minutes=2),
    'provide_context': True,
    'email': ['{{ product.owner }}'],
    'email_on_failure': False,
    'email_on_retry': False
}

with airflow.DAG(
    dag_id='{{ product.id }}-{{ product.version }}',
    default_args=default_args,
    dagrun_timeout=timedelta(hours=2),
    schedule_interval='{{ product.pipeline.schedule or '0 3 * * *' }}'
) as dag:

    glue_task = GlueJobOperator(
        task_id='{{ product.id }}',
        job_name='{{ product.id }}-{{ product.version }}',
        iam_role_name="{{ GLUE_ROLE_NAME }}",
        dag=dag,
        num_of_dpus=2,
        region_name='{{ AWS_REGION }}',
        s3_bucket='{{ S3_BUCKET_DATALAKE_NAME }}',
        script_location='{{ PYSPARK_SCRIPT_LOCATION }}',
        retry_limit=0,
        create_job_kwargs={
            "DefaultArguments": {
                "--additional-python-modules": "pydantic,quinn,pyyaml,mypy-boto3-glue,jsonschema,{{DPP_MODULE}}",
                '--default_data_lake_bucket': "{{ S3_BUCKET_DATALAKE_NAME }}",
                '--extra-files': "{{ S3_BUCKET_ARTIFACTS }}/datamesh/products/{{ product.id }}-{{ product.version }}.zip",
                '--extra-jars': "{{ EXTRA_JARS }}",
                '--TempDir': "{{ S3_BUCKET_ARTIFACTS_GLUE }}",
                '--job-bookmark-option': "job-bookmark-disable",
                '--enable-metrics': ""
            },
            "GlueVersion": "{{ GLUE_VERSION }}",
        },
        on_failure_callback=on_failure
    )

{% if dependencies %}
{% for dependency in dependencies  %}
    externalsensor_{{ loop.index }} = ExternalTaskSensor(
        external_dag_id='{{ dependency }}',
        task_id='wait_for_{{ dependency }}',
        check_existence=True,
    )
{% endfor %}

    {% for dependency in dependencies  %}externalsensor_{{ loop.index }} >> {% endfor %} glue_task
{% endif %}
