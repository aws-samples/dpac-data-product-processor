# This is a basic workflow to help you get started with Actions

name: release

on:
  push:
    tags:
      - major-*
      - minor-*
      - patch-*   
    
permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump2version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - name: set to major release
        if: github.ref_type == 'tag' && startsWith(github.ref_name, 'major-')
        run: |
          echo "RELEASE_TYPE=major" >> $GITHUB_ENV
      - name: set to minor release
        if: github.ref_type == 'tag' && startsWith(github.ref_name, 'minor-')
        run: |
          echo "RELEASE_TYPE=minor" >> $GITHUB_ENV
      - name: set to patch release
        if: github.ref_type == 'tag' && startsWith(github.ref_name, 'patch-')
        run: |
          echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
      - id: bump2version
        name: bump data product processor version
        run: |
          pip install bump2version
          . ./version.sh
          echo $VERSION
          bump2version --current-version $VERSION ${RELEASE_TYPE}
          # load new version in environment
          . ./version.sh
          echo $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Commit from CI [skip actions]
          tagging_message: ${{ env.VERSION }}
          branch: main

  build:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "refs/tags/${{needs.bump-version.outputs.version}}"
      - name: build whl
        run: |
          python -m pip install --upgrade pip
          pip install -U -e  .
          pip install -r requirements-test.txt
          python setup.py build -vf && python setup.py bdist_wheel
      - name: Archive data product processor distribution
        uses: actions/upload-artifact@v3
        with:
          name: dpp-dist
          retention-days: 30
          path: |
            ./dist/*
            ./main.py

  deploy-test:
    needs: [build, bump-version]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "refs/tags/${{needs.bump-version.outputs.version}}"
      - uses: actions/download-artifact@v3
        with:
          name: dpp-dist
      - name: Deploy to test PyPI
        run: |
          pip install twine
          ls -alh
